{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>BitBrew is a powerful CLI tool designed to revolutionize Bitcoin test network interactions. By providing an intuitive interface to the Bitcoin Core RPC API and leveraging regtest mode, BitBrew creates isolated networks ideal for testing, development, and educational purposes.</p> <p>Warning</p> <p>BitBrew is currently in the alpha phase of development. While functional, it may contain bugs or undergo significant changes.</p>"},{"location":"#the-challenge-with-traditional-testnets","title":"The Challenge with Traditional Testnets","text":"<p>Bitcoin developers and testers often face significant hurdles when working with traditional testnets. These public networks can be unpredictable and unreliable, with constantly changing network conditions. Developers have limited control over crucial aspects like block times and mining, while competition for shared resources can hinder efficient development and testing.</p> <p>Recent events have further highlighted the volatility of public testnets. For instance, a griefing attack on Bitcoin's testnet generated three years' worth of blocks in just one week, causing significant disruptions for developers.</p> <p>Setting up a private testnet manually is often a complex, time-consuming, and error-prone process. These challenges can significantly slow down development, complicate testing processes, and create barriers for newcomers to Bitcoin development.</p>"},{"location":"#bitbrew-crafting-reliable-test-environments","title":"BitBrew: Crafting Reliable Test Environments","text":"<p>BitBrew addresses these challenges head-on by allowing you to brew your own private Bitcoin test networks. With BitBrew, you can:</p> <ul> <li>Create isolated environments free from external interference</li> <li>Maintain full control over block generation, mining, and network conditions</li> <li>Spin up a fully functional test network with a single command</li> <li>Ensure a stable, predictable environment for repeatable tests and experiments</li> </ul>"},{"location":"#key-features-and-benefits","title":"Key Features and Benefits","text":"<p>BitBrew stands out for its simplicity and power, offering a streamlined way to work with Bitcoin networks:</p> <ul> <li>Easy Network Creation: Brew your own Bitcoin test network with a single command.</li> <li>Comprehensive Node Management: Effortlessly add, remove, start, and stop nodes in your network.</li> <li>Wallet Operations: Create wallets, mine blocks, and transfer funds between wallets with ease.</li> <li>Network Visualization: Quickly list and inspect your network nodes and their connections.</li> <li>Direct Node Interaction: Attach to nodes or execute Bitcoin Core commands directly from the CLI.</li> </ul> <p>By choosing BitBrew, you're opting for reliability over unpredictable testnet behavior, simplified setup over complex configurations, and a controlled environment perfect for learning and development. The Docker integration ensures consistent and isolated environments, making BitBrew an ideal tool for both seasoned developers and newcomers to Bitcoin development.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Make sure you have Docker and Node.js installed on your system.</p> <p>Get started with BitBrew in minutes:</p> <pre><code>npm install -g bitbrew\nbitbrew brew\n</code></pre> <p>This simple command installs BitBrew and creates your first test network with two regtest nodes, giving you immediate access to a controlled Bitcoin testing environment.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>To dive deeper into BitBrew:</p> <ol> <li>Check out Getting Started for detailed setup instructions.</li> <li>Have a look at all the commands at Command Reference</li> <li>Look at an example.</li> </ol> <p>Join us in brewing the future of Bitcoin development, where reliable and controllable test environments are just a command away!</p>"},{"location":"getting-started/","title":"Getting Started with BitBrew","text":"<p>Welcome to BitBrew! This comprehensive guide will walk you through setting up BitBrew and creating your first Bitcoin test network.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before diving into BitBrew, let's ensure you have the necessary tools installed.</p>"},{"location":"getting-started/#docker","title":"Docker","text":"<p>BitBrew leverages Docker to create isolated environments for Bitcoin nodes. This approach ensures consistency across different systems and simplifies the setup process.</p> <ul> <li>Download Docker from docker.com</li> <li>Installation steps vary by operating system:</li> <li>Windows and Mac: Use the Docker Desktop installer</li> <li>Linux: Follow the appropriate installation guide for your distribution</li> <li>After installation, open a terminal/command prompt and verify Docker is working:   <pre><code>docker --version\ndocker run hello-world\n</code></pre></li> </ul> <p>If both commands execute without errors, Docker is set up correctly.</p>"},{"location":"getting-started/#nodejs","title":"Node.js","text":"<p>BitBrew is built on Node.js, allowing it to run on various platforms.</p> <ul> <li>Download Node.js (version 18 or higher) from nodejs.org</li> <li>Choose the appropriate installer for your operating system</li> <li>After installation, verify by opening a terminal/command prompt and running:   <pre><code>node --version\nnpm --version\n</code></pre></li> </ul> <p>Both commands should return version numbers without any errors.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>With the prerequisites in place, you're ready to install BitBrew.</p> <pre><code>npm install -g bitbrew\n</code></pre> <p>This command installs BitBrew globally on your system, making the <code>bitbrew</code> command available from any directory.</p> <p>Verify the installation:</p> <pre><code>bitbrew --version\n</code></pre> <p>If you see a version number, BitBrew is installed correctly.</p>"},{"location":"getting-started/#quick-start-guide","title":"Quick Start Guide","text":"<p>Now, let's create your first Bitcoin test network and explore BitBrew's core features.</p>"},{"location":"getting-started/#1-brew-your-network","title":"1. Brew Your Network","text":"<p>The <code>brew</code> command is your starting point with BitBrew. It sets up a basic network with two nodes.</p> <pre><code>bitbrew brew\n</code></pre> <p>This command: - Creates two Docker containers, each running a Bitcoin Core node in regtest mode - Sets up the necessary configuration for each node - Starts the nodes</p>"},{"location":"getting-started/#2-list-your-nodes","title":"2. List Your Nodes","text":"<p>The <code>ls</code> command gives you an overview of your network.</p> <pre><code>bitbrew ls\n</code></pre> <p>You'll see a table with details about each node: - Name: The identifier for each node - Status: Whether the node is running or stopped - Port: The network port the node is using - RPC port: The port used for Remote Procedure Calls (RPC) to interact with the node</p>"},{"location":"getting-started/#3-connect-the-nodes","title":"3. Connect the Nodes","text":"<p>In a real Bitcoin network, nodes discover and connect to each other automatically. In our controlled environment, we manually connect them.</p> <pre><code>bitbrew connect node0 node1\n</code></pre> <p>This command establishes a connection from <code>node0</code> to <code>node1</code>, allowing them to exchange information.</p>"},{"location":"getting-started/#4-create-wallets","title":"4. Create Wallets","text":"<p>Wallets are essential for managing funds in Bitcoin. Let's create two wallets:</p> <pre><code>bitbrew wallet create alice node0\nbitbrew wallet create bob node1\n</code></pre> <p>These commands create wallets named \"alice\" and \"bob\" on <code>node0</code> and <code>node1</code> respectively. In a test environment, it's common to use descriptive names like this for clarity.</p>"},{"location":"getting-started/#5-mine-some-blocks","title":"5. Mine Some Blocks","text":"<p>In Bitcoin, new coins are created through mining. Let's mine some blocks to generate coins:</p> <pre><code>bitbrew mine alice 101\n</code></pre> <p>This command: - Mines 101 blocks - Sends the block rewards to the \"alice\" wallet - We mine 101 blocks because the coinbase transaction (which creates new coins) requires 100 confirmations before it can be spent</p>"},{"location":"getting-started/#6-send-funds","title":"6. Send Funds","text":"<p>Now that we have some coins, let's perform a transaction:</p> <pre><code>bitbrew send alice bob 10\n</code></pre> <p>This command sends 10 BTC from Alice's wallet to Bob's wallet. In the background, BitBrew: - Creates a transaction - Signs it with Alice's wallet - Broadcasts it to the network - Mines a new block to confirm the transaction</p>"},{"location":"getting-started/#7-check-balances","title":"7. Check Balances","text":"<p>To verify the transaction, let's check both wallets:</p> <pre><code>bitbrew wallet balance alice\nbitbrew wallet balance bob\n</code></pre> <p>You should see that Bob's balance has increased by 10 BTC, while Alice's has decreased by slightly more than 10 BTC (the extra amount is the transaction fee).</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've set up a Bitcoin test network, created wallets, mined blocks, and performed a transaction. Here's how you can dive deeper:</p> <ul> <li>Explore more commands with <code>bitbrew --help</code></li> <li>Check out the User Guide for detailed information on each feature</li> <li>Join our community forums or GitHub discussions to share your experiences and get help</li> </ul> <p>Remember, BitBrew allows you to experiment freely without affecting the real Bitcoin network. Happy brewing, and enjoy exploring the world of Bitcoin development!</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This is a high-level roadmap for the BitBrew project. It outlines the key features and milestones planned for the project. The roadmap is subject to change based on feedback and contributions from the community.</p> <p>Last release: 0.1.0-alpha</p>"},{"location":"roadmap/#010","title":"0.1.0","text":"<ul> <li> Update documentation and add examples</li> <li> Add debug logging and improve error handling</li> <li> Fix bugs from initial release and improve overall stability</li> <li> Improve help messages</li> <li> Use <code>esbuild</code> for more compact and faster builds</li> </ul>"},{"location":"roadmap/#020","title":"0.2.0","text":"<ul> <li> Optimize and finalize the engine feature</li> <li> Implement node renaming functionality</li> <li> Add support for creating multiple nodes with a single command (e.g., <code>bitbrew add -n 3</code>)</li> <li> Allow users to edit <code>bitcoin.conf</code> files for individual nodes</li> <li> Implement node restart functionality</li> <li> Other minor improvements and bug fixes</li> </ul>"},{"location":"roadmap/#long-term-vision-100-and-beyond","title":"Long-term Vision (1.0.0 and beyond)","text":"<ul> <li>Develop a plugin system/architecture for extensibility</li> <li>Implement advanced features like custom signet networks and support for other Bitcoin implementations</li> <li>Simulate network latency</li> <li>Create an API for programmatic interaction with the network</li> <li>Implement network visualization</li> <li>Add support for custom Docker images</li> <li>Develop snapshot and restore functionality for network states</li> <li>Implement time manipulation features (fast-forward, pause)</li> <li>Implement scalability solutions to span across multiple hosts</li> <li>Adding detailed analytics and monitoring capabilities using tools like Prometheus and Grafana</li> <li>Publish packages for different package managers (e.g., Homebrew, Chocolatey)</li> <li>Add a GUI for easier interaction with the network</li> </ul>"},{"location":"roadmap/#milestones","title":"Milestones","text":"<ul> <li> 0.1.0-alpha</li> <li> Initial project structure and core functionality</li> <li> Basic CLI interface with essential commands</li> <li> Docker integration for node management</li> <li> Wallet creation and management</li> <li> Basic transaction and mining capabilities</li> </ul>"},{"location":"roadmap/#key-features-to-develop","title":"Key Features to develop","text":"<ul> <li>Improved error handling and logging</li> <li>Enhanced network management</li> <li>Advanced wallet operations</li> <li>Integration with external tools (explorers, monitoring)</li> <li>Snapshot and restore capabilities</li> <li>Time manipulation for testing scenarios</li> </ul>"},{"location":"examples/basic-usage/","title":"Creating a Network and Performing Transactions","text":"<p>This guide will walk you through a basic example of using BitBrew to create a Bitcoin test network, set up wallets, mine some blocks, and perform a transaction. By following this example, you'll gain hands-on experience with the core features of BitBrew.</p>"},{"location":"examples/basic-usage/#step-1-create-a-network","title":"Step 1: Create a Network","text":"<p>First, let's create a simple network with two nodes.</p> <pre><code>bitbrew brew\n</code></pre> <p>This command creates and starts a network with two nodes: <code>node0</code> and <code>node1</code>.</p> <p>Verify the network creation:</p> <pre><code>bitbrew ls\n</code></pre> <p>You should see output similar to:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (index) \u2502  name   \u2502  status   \u2502 port  \u2502 RPC port \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    0    \u2502 'node0' \u2502 'running' \u2502 20443 \u2502  21443   \u2502\n\u2502    1    \u2502 'node1' \u2502 'running' \u2502 20444 \u2502  21444   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"examples/basic-usage/#step-2-connect-the-nodes","title":"Step 2: Connect the Nodes","text":"<p>Now, let's connect the two nodes:</p> <pre><code>bitbrew connect node0 node1\n</code></pre> <p>This establishes a connection between <code>node0</code> and <code>node1</code>.</p>"},{"location":"examples/basic-usage/#step-3-create-wallets","title":"Step 3: Create Wallets","text":"<p>We'll create two wallets, one for each node:</p> <pre><code>bitbrew wallet create alice node0\nbitbrew wallet create bob node1\n</code></pre> <p>Verify the wallet creation:</p> <pre><code>bitbrew wallet ls\n</code></pre> <p>You should see:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (index) \u2502  name   \u2502  node   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    0    \u2502 'alice' \u2502 'node0' \u2502\n\u2502    1    \u2502  'bob'  \u2502 'node1' \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"examples/basic-usage/#step-4-mine-some-blocks","title":"Step 4: Mine Some Blocks","text":"<p>To get some coins in Alice's wallet, we'll mine 101 blocks:</p> <pre><code>bitbrew mine alice 101\n</code></pre> <p>This mines 101 blocks, with the block rewards going to Alice's wallet. We mine 101 blocks because the coinbase transactions (which create new coins) require 100 confirmations before they can be spent.</p>"},{"location":"examples/basic-usage/#step-5-check-balances","title":"Step 5: Check Balances","text":"<p>Let's check the balance in Alice's wallet:</p> <pre><code>bitbrew wallet balance alice\n</code></pre> <p>You should see a balance of 50 BTC for each block mined (minus the first block), so approximately 5000 BTC.</p> <p>Bob's wallet should still have 0 BTC:</p> <pre><code>bitbrew wallet balance bob\n</code></pre>"},{"location":"examples/basic-usage/#step-6-perform-a-transaction","title":"Step 6: Perform a Transaction","text":"<p>Now, let's send some Bitcoin from Alice to Bob:</p> <pre><code>bitbrew send alice bob 10\n</code></pre> <p>This sends 10 BTC from Alice's wallet to Bob's wallet.</p>"},{"location":"examples/basic-usage/#step-7-verify-the-transaction","title":"Step 7: Verify the Transaction","text":"<p>Check the balances again:</p> <pre><code>bitbrew wallet balance alice\nbitbrew wallet balance bob\n</code></pre> <p>You should see that Bob now has 10 BTC, and Alice's balance has decreased by slightly more than 10 BTC (the extra amount is the transaction fee).</p>"},{"location":"examples/basic-usage/#step-8-mine-another-block","title":"Step 8: Mine Another Block","text":"<p>To ensure the transaction is confirmed, let's mine another block:</p> <pre><code>bitbrew mine alice 1\n</code></pre>"},{"location":"examples/basic-usage/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully:</p> <ol> <li>Created a Bitcoin test network</li> <li>Connected nodes in the network</li> <li>Created wallets</li> <li>Mined blocks to generate coins</li> <li>Performed a transaction between wallets</li> </ol> <p>This basic example demonstrates the core functionality of BitBrew. From here, you can explore more advanced features like adding more nodes, creating complex network topologies, or simulating various Bitcoin network scenarios.</p> <p>Remember to clean up your test network when you're done:</p> <pre><code>bitbrew clean\n</code></pre> <p>This removes all nodes and resets your BitBrew environment.</p>"},{"location":"user-guide/basic-concepts/","title":"Basic Concepts","text":"<p>Welcome to the BitBrew Basic Concepts guide. This document will introduce you to the fundamental components and ideas behind BitBrew and its Bitcoin test networks. Understanding these concepts will help you make the most of BitBrew's features.</p>"},{"location":"user-guide/basic-concepts/#nodes","title":"Nodes","text":"<p>In the context of BitBrew, a node represents a Bitcoin Core instance running in regtest mode. Each node is an independent participant in your test network, capable of mining blocks, validating transactions, and maintaining a copy of the blockchain. BitBrew creates and manages these nodes using Docker containers, providing a consistent and isolated environment for each node.</p> <p>Key characteristics of nodes in BitBrew:</p> <ul> <li>Independent Bitcoin Core instances</li> <li>Run in regtest mode</li> <li>Managed via Docker containers</li> <li>Identified by simple names (e.g., <code>node0</code>, <code>node1</code>)</li> </ul> <p>Common node operations:</p> <ol> <li>Add a node: <code>bitbrew add &lt;node_name&gt;</code></li> <li>Remove a node: <code>bitbrew remove &lt;node_name&gt;</code></li> <li>Start a node: <code>bitbrew start &lt;node_name&gt;</code></li> <li>Stop a node: <code>bitbrew stop &lt;node_name&gt;</code></li> <li>List all nodes: <code>bitbrew ls</code></li> </ol> <p>Note: For all BitBrew nodes, the default RPC credentials are: <code>rpcuser=user</code> and <code>rpcpassword=pass</code>.</p>"},{"location":"user-guide/basic-concepts/#wallets","title":"Wallets","text":"<p>Wallets in BitBrew are Bitcoin wallets associated with specific nodes. They serve as the interface for managing, sending, and receiving Bitcoin within your test network. Each wallet is tied to a specific node, allowing you to simulate different participants in your Bitcoin network.</p> <p>Key points about wallets:</p> <ul> <li>Associated with specific nodes</li> <li>Manage private keys and addresses</li> <li>Can have descriptive names (e.g., \"alice\", \"bob\")</li> <li>Simulate different network participants</li> </ul> <p>Wallet operations:</p> <ol> <li>Create a wallet: <code>bitbrew wallet create &lt;wallet_name&gt; &lt;node_name&gt;</code></li> <li>List wallets: <code>bitbrew wallet ls</code></li> <li>Check balance: <code>bitbrew wallet balance &lt;wallet_name&gt;</code></li> <li>Send funds: <code>bitbrew send &lt;from_wallet&gt; &lt;to_wallet&gt; &lt;amount&gt;</code></li> </ol>"},{"location":"user-guide/basic-concepts/#network","title":"Network","text":"<p>The network in BitBrew refers to the collection of interconnected nodes that form your private Bitcoin test environment. This network is completely isolated from the public Bitcoin network, giving you full control over network conditions, block generation, and connections.</p> <p>Network features:</p> <ul> <li>Isolated from the public Bitcoin network</li> <li>Fully controllable environment</li> <li>Customizable topology and conditions</li> </ul> <p>Main network operations:</p> <ol> <li>Create a network: <code>bitbrew brew</code></li> <li>Connect nodes: <code>bitbrew connect &lt;source_node&gt; &lt;target_node&gt;</code></li> <li>Mine blocks: <code>bitbrew mine &lt;wallet_name&gt; &lt;number_of_blocks&gt;</code></li> </ol>"},{"location":"user-guide/basic-concepts/#regtest-mode","title":"Regtest Mode","text":"<p>BitBrew uses Bitcoin Core's regression test mode (regtest). This mode is specifically designed for testing and development purposes, offering features that make it ideal for creating controlled test environments.</p> <p>Key features of regtest mode:</p> <ul> <li>Instant block generation on-demand</li> <li>Easy blockchain reset (stop and restart network)</li> <li>Completely controlled environment</li> <li>No influence from external factors</li> </ul>"},{"location":"user-guide/basic-concepts/#docker-integration","title":"Docker Integration","text":"<p>BitBrew leverages Docker to create isolated environments for each node. This integration provides several key benefits for testing and development.</p> <p>Benefits of Docker integration:</p> <ol> <li>Consistency across different systems</li> <li>Easy setup and teardown of nodes</li> <li>Isolation between nodes and from the host system</li> <li>Realistic simulation of network environments</li> </ol>"},{"location":"user-guide/basic-concepts/#understanding-bitbrews-workflow","title":"Understanding BitBrew's Workflow","text":"<p>The typical BitBrew workflow follows these steps:</p> <ol> <li>Create a network (<code>brew</code>): Sets up Docker containers for nodes.</li> <li>Connect nodes: Establishes connections between nodes in your network.</li> <li>Create wallets: Allows you to manage funds within nodes.</li> <li>Mine blocks: Generates new blocks and Bitcoin in your test network.</li> <li>Perform transactions: Send Bitcoin between wallets to simulate activity.</li> </ol> <p>This workflow allows you to create complex scenarios and test various aspects of Bitcoin applications in a controlled, realistic environment.</p> <p>By understanding these basic concepts, you'll be well-equipped to use BitBrew effectively for your Bitcoin development and testing needs. As you become more familiar with these components, you'll be able to create increasingly complex scenarios and thoroughly test various aspects of Bitcoin applications.</p> <p>For more detailed information on each concept and associated commands, please refer to the respective sections in the User Guide.</p>"},{"location":"user-guide/command-reference/","title":"BitBrew Command Reference","text":"<p>This guide provides a comprehensive list of all available BitBrew commands, their syntax, options, and brief descriptions.</p>"},{"location":"user-guide/command-reference/#network-management","title":"Network Management","text":""},{"location":"user-guide/command-reference/#brew","title":"<code>brew</code>","text":"<p>Creates and starts a new Bitcoin test network.</p> <p>Syntax: <code>bitbrew brew [options]</code></p> <p>Options:</p> <ul> <li><code>-n, --nodes &lt;number&gt;</code>: Number of nodes to create (default: 2)</li> <li><code>-e, --engine</code>: Start the BitBrew engine for automatic network activity</li> </ul> <p>Example: <code>bitbrew brew -n 3</code></p>"},{"location":"user-guide/command-reference/#connect","title":"<code>connect</code>","text":"<p>Connects nodes in the Bitcoin network.</p> <p>Syntax: <code>bitbrew connect [options] [source-node] [target-node...]</code></p> <p>Options:</p> <ul> <li><code>-a, --all</code>: Connect all nodes in a round-robin fashion</li> </ul> <p>Example: <code>bitbrew connect node0 node1 node2</code></p>"},{"location":"user-guide/command-reference/#ls","title":"<code>ls</code>","text":"<p>Lists all nodes in your Bitcoin test network.</p> <p>Syntax: <code>bitbrew ls</code></p>"},{"location":"user-guide/command-reference/#start","title":"<code>start</code>","text":"<p>Starts nodes in the Bitcoin network.</p> <p>Syntax: <code>bitbrew start [options] [node...]</code></p> <p>Options:</p> <ul> <li><code>-a, --all</code>: Start all nodes</li> </ul> <p>Example: <code>bitbrew start node0 node1</code></p>"},{"location":"user-guide/command-reference/#stop","title":"<code>stop</code>","text":"<p>Stops nodes in your Bitcoin test network.</p> <p>Syntax: <code>bitbrew stop [options] [node...]</code></p> <p>Options:</p> <ul> <li><code>-a, --all</code>: Stop all nodes</li> </ul> <p>Example: <code>bitbrew stop node0</code></p>"},{"location":"user-guide/command-reference/#add","title":"<code>add</code>","text":"<p>Adds a new node to your Bitcoin test network.</p> <p>Syntax: <code>bitbrew add &lt;name&gt;</code></p> <p>Example: <code>bitbrew add node3</code></p>"},{"location":"user-guide/command-reference/#remove","title":"<code>remove</code>","text":"<p>Removes nodes from your Bitcoin test network.</p> <p>Syntax: <code>bitbrew remove &lt;node&gt;</code></p> <p>Example: <code>bitbrew remove node2</code></p>"},{"location":"user-guide/command-reference/#clean","title":"<code>clean</code>","text":"<p>Cleans up your Bitcoin test network, removing all nodes and associated data.</p> <p>Syntax: <code>bitbrew clean</code></p>"},{"location":"user-guide/command-reference/#node-interaction","title":"Node Interaction","text":""},{"location":"user-guide/command-reference/#exec","title":"<code>exec</code>","text":"<p>Executes a command on a specific node.</p> <p>Syntax: <code>bitbrew exec &lt;node&gt; &lt;command&gt;</code></p> <p>Example: <code>bitbrew exec node0 getblockchaininfo</code></p>"},{"location":"user-guide/command-reference/#attach","title":"<code>attach</code>","text":"<p>Attaches to a running node, allowing direct interaction.</p> <p>Syntax: <code>bitbrew attach &lt;node&gt;</code></p> <p>Example: <code>bitbrew attach node1</code></p>"},{"location":"user-guide/command-reference/#wallet-operations","title":"Wallet Operations","text":""},{"location":"user-guide/command-reference/#wallet-create","title":"<code>wallet create</code>","text":"<p>Creates a new wallet for a specified node.</p> <p>Syntax: <code>bitbrew wallet create &lt;name&gt; &lt;node&gt;</code></p> <p>Example: <code>bitbrew wallet create alice node0</code></p>"},{"location":"user-guide/command-reference/#wallet-ls","title":"<code>wallet ls</code>","text":"<p>Lists all wallets in your Bitcoin test network.</p> <p>Syntax: <code>bitbrew wallet ls</code></p>"},{"location":"user-guide/command-reference/#wallet-balance","title":"<code>wallet balance</code>","text":"<p>Displays the balance of a specified wallet.</p> <p>Syntax: <code>bitbrew wallet balance &lt;name&gt;</code></p> <p>Example: <code>bitbrew wallet balance alice</code></p>"},{"location":"user-guide/command-reference/#send","title":"<code>send</code>","text":"<p>Transfers funds between wallets.</p> <p>Syntax: <code>bitbrew send &lt;from&gt; &lt;to&gt; &lt;amount&gt;</code></p> <p>Example: <code>bitbrew send alice bob 10</code></p>"},{"location":"user-guide/command-reference/#mining","title":"Mining","text":""},{"location":"user-guide/command-reference/#mine","title":"<code>mine</code>","text":"<p>Mines a specified number of blocks, with rewards going to the specified wallet.</p> <p>Syntax: <code>bitbrew mine &lt;wallet&gt; [number]</code></p> <p>Example: <code>bitbrew mine alice 10</code></p>"},{"location":"user-guide/command-reference/#miscellaneous","title":"Miscellaneous","text":""},{"location":"user-guide/command-reference/#-version","title":"<code>--version</code>","text":"<p>Displays the version of BitBrew.</p> <p>Syntax: <code>bitbrew --version</code></p>"},{"location":"user-guide/command-reference/#-help","title":"<code>--help</code>","text":"<p>Displays help information for BitBrew or a specific command.</p> <p>Syntax: <code>bitbrew --help [command]</code></p> <p>Example: <code>bitbrew --help connect</code></p> <p>Remember that all commands should be prefixed with <code>bitbrew</code>. For more detailed information on each command and its usage, you can use the <code>--help</code> option with any command.</p>"}]}